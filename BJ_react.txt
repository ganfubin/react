cnpm install -g create-react-app脚手架
npm run eject解除脚手架封装


1.props,值是不可改变的.在表单中需要配合onChange.只能由父级往下传,props可以传数据，事件，插件的各种link等。
在表单元素中一旦给某个可改变的值使用了props值，就会报错,比如input[type='text']的value值设置为Props就会报错，这时需要给按钮绑定一个Onchange事件加函数，该函数和组件的render方法为并列关系.比如
<input type="text" value={this.props.somPropsValue}>//报错
<input type="text" defaultValue={this.props.somPropsValue}/>//ok 或者
<input type="text" onChange={this.somePropsFunction} />//然后在组件内写入函数
getDefaultProps可以在子组建指定默认的props数据，如果父级传入了数据则会显示为传入的数据，如果部则会显示为props默认的消息.可以使用propsType验证数据
getInitialState(){}
对于组件的每个实例来说，这个方法的调用有且只有一次，用来初始化每个实例的 state，在这个方法里，可以访问组件的 props.每一个React组件都有自己的 state，其与 props 的区别在于 state只存在组件的内部，props 在所有实例中共享。

3.组件的状态.既然props无法改变,当我们需要改变数据或作做双向数据绑定时怎么办呢?这时就涉及到了state了,(状态发生改变时会用facebook的diff算法重新渲染render方法)基本格式:
getInitialState:function(){
	return {
		message:this.props.somePropsValue//假使我们要对某个表单做双向数据绑定，该值是由props传递过来的，当然这只是其中的解决方案之一，还有更好的方案可以替代.见笔记4
	}
}
//不要直接改变state,而是用this.setState();该方法会重新render一下
<input type="text" value={this.state.someStateKey} onChange={this.changeText}/ >
<p>{this.state.someStateKey}</p>
//组件里这么写
var someComponent=React.createClass({
	getInitialState:function(){//get Initial State 取得最初状态
		return {
			someStateKey:this.props.somePropsValue
		}

	},
	changeText:function(ev){

		var newValue=ev.target.value;
		this.setState({someStateKey:newValue});

	}
})
4.event对象. ev.target.value,表示获取真实的dom值.


5.react中的form表单,value要用state而不是props数据绑定，defaultValue,defaultChecked表示默认值和默认选中,改变数据的值要配合onChange事件绑定一个函数，注意value一定要配合onChange事件使用，否则会报错。

6.当我们采用onChange来获取和改变数据时会写很多事件很麻烦，于是就有了ref属性
this.refs['someRelfName'],从而取消onChange事件的绑定.使用ref属性时，可以用defaultValue指定默认值.
当我们处理radio或者checkbox时，还是用onChange事件比较好，否则会使用很多不确定的ref值，增大代码量。当用input/text和textarea和select时使用ref属性比较方便。
this.refs['someRelfName']获取真实的dom节点.
ReactDOM.findDOMNode也可以获取真实的dom节点.ref也可以写成一个函数->ref={function(ele){ReactDOM.findDOMNode(ele).focus()}}
ReactDOM.unmountComponentAtNode(DOMObj);删除某个组建
7.组件的生命周期
装载阶段: componentWillMount将要被装载,componentDidMount已经被装载
更新阶段:componentWillMount,componentDidUpdate
卸载阶段:componentWillUnmount,componentDid
//componentWillUnmount常用来删除定时器，事件监听器等

组建的生命周期顺序
getDefaultProps函数最先执行
getInitialState其次，
componentWillMount其次，
然后是组建的render方法渲染，
然后是componentDidMount。

每次修改 state，都会重新渲染组件，实例化后通过 state 更新组件，会依次调用下列方法：
1、shouldComponentUpdate:function(nextProp,nextState)(在父组件的该方法优先级最高)
2、conponentWillUpdate:function(nextProp,nextState)
3、render
4、conponentDidUpdate:function(nextProp,nextState)
两个参数分别为下一次的prop值和state值

8.引入带插件的React-with-addons.js
mixins:[React.addons.LinkedStateMixin],//双向数据绑定插件
此时<input type="text" value/>要改成 <input type="text" valueLink={this.linkState({someStateKey})}/>


9.React.Children代替this.props.children,因为this.props.children 的值有三种可能：如果当前组件没有子节点,它就是 undefined;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array